(* In this assessment, we will explore how to use
   LLMs to help us learn a new programming language
   and understand programming language concepts.

   The example language we will explore is SML. You 
   can use your favorite LLM (GPT, Claude, etc) and
   the online SML implementation SOSML, see
   https://sosml.org/editor?0&                   *)

(* QUESTION 1 (10 marks) *)

(* write a datatype Date that consists of an
   integer day, a symbolic month and an integer 
                                            year *)

datatype Month = January | February | March | April | May | June | July | August | September | October | November | December

datatype Date = Date of int * Month * int

(* Test cases: if you don't answer this question,
   comment the following before you submit       *)

 val myDate = Date(7, September, 2024); 
 val yourDate = Date(31, December, 1900); 
 val theirDate = Date(31, February, 2011);
 val notLeapYear = Date(29, February, 1900);
 val leapYear = Date(29, February, 2000);

(* write a function isValidDate that checks if a
   given date is valid, considering that in leap
   years, the month of February has 29 days, and
   that a leap year is a year that is divisible
   by 4, with the exception that years that are
   divisible by 100 and not by 400 are not leap
   years. Assume that only positive integers are
   used as years.                                *)

(* Function to check if a year is a leap year *)
fun isLeapYear year = 
    (year mod 4 = 0 andalso year mod 100 <> 0) orelse (year mod 400 = 0)

(* Function to return the number of days in a given month for a specific year *)
fun daysInMonth (month, year) =
    case month of
         January => 31
       | February => if isLeapYear year then 29 else 28
       | March => 31
       | April => 30
       | May => 31
       | June => 30
       | July => 31
       | August => 31
       | September => 30
       | October => 31
       | November => 30
       | December => 31

(* Function to check if a date is valid *)
fun isValidDate (Date(day, month, year)) =
    day >= 1 andalso day <= daysInMonth(month, year) andalso year > 0

(* Test cases: if you don't answer this question,
   uncomment the following before you submit     *)

val isMyDateValid = isValidDate myDate;
val isYourDateValid = isValidDate yourDate;
val isTheirDateValid = isValidDate theirDate;
val isLeapYear = isValidDate notLeapYear;
val isValidLeapYear = isValidDate leapYear;

(* QUESTION 2 (6 marks) *)

(* write a generic datatype MyList that can be 
   used to construct lists that are either empty
   (denoted by Empty) or the result of the
   constructor Cons, which takes an element as 
   first argument and a MyList as second.        *)

datatype 'a MyList = Empty | Cons of 'a * 'a MyList

(* Test cases: if you don't answer this question,
   comment the following before you submit       *)

val myList1 = Empty;
val myList2 = Cons(1, Cons(2, Empty));
val myList3 = Cons(fn x => 1, Empty);

(* Define a function myMap that lets you 
   transform a MyList into another MyList by
   applying a generic function to each element 
   as shown in the examples.                     *)

fun myMap _ Empty = Empty
  | myMap f (Cons(x, xs)) = Cons(f x, myMap f xs)


(* Test cases: if you don't answer this question,
   comment the following before you submit       *)

val myList1' = myMap (fn x => x + 1) myList1;
val myList2' = myMap (fn x => x + 1) myList2;
val myList3' = myMap (fn x => x 2) myList3;

(* QUESTION 3 (4 marks) *)

(* Imagine you're creating a simple game inventory
   system. Players can collect different types of
   items, each with its own properties. However,
   you want to store all these items in a single
   list for easy management.                     *)

(* let's define three different record types     *)

type weapon = {name: string, damage: int}
type potion = {name: string, healing: int}
type key = {name: string, door: string};

(* Let's create some sample items                *)

val sword = {name = "Steel Sword", 
             damage = 10}
val healPotion = {name = "Health Potion", 
                  healing = 50}
val bossKey = {name = "Golden Key", 
               door = "Boss Room"};

(* Let's try to create a list (or MyList)
   containing all these items                    *)

(* uncomment this out and see what happens *)
(* val inventory = [sword, healPotion, bossKey]; *)
(* val inventory = Cons(sword, 
                        Cons(healPotion, 
                             Cons(bossKey,
                                  Empty)));      *)

(* To solve the problem, we need a common data type
   that can serve as the type of all three kinds of
   items                                         *)

(* Create a data type called item that provides a
   common interface for the three game inventory
   items.                                        *)

(* Define the item type to represent different kinds of items *)
datatype item = Weapon of {name: string, damage: int}
              | Potion of {name: string, healing: int}
              | Key of {name: string, door: string}

(* Test case: if you don't answer this question,
   comment the following before you submit       *)

val inventory = [
  Weapon {name = "Steel Sword", damage = 10},
  Potion {name = "Health Potion", healing = 50},
  Key {name = "Golden Key", door = "Boss Room"}
];

(* QUESTION 4 (10 marks) *)

(* Let us say we define a shape datatype
   as follows *)

datatype shape = Shape of {
       (* area of the shape *)
       area: unit -> real, 
       (* name: a string that describes 
                the shape *)
       name: string}

(* Write a function makeCircle to 
   create a circle                               *)

fun makeCircle radius =
    let
        (* The area function calculates the area of the circle *)
        val areaFn = fn () => Math.pi * radius * radius
    in
        (* Return a Shape with the area function and the name "Circle" *)
        Shape {area = areaFn, name = "Circle"}
    end

(* Test case: if you don't answer this question,
   comment the following before you submit       *)

val myCircle = makeCircle 5.0;

(* Write a function makeRectangle to 
   create a rectangle                            *)

fun makeRectangle (width, height) =
    let
        (* The area function calculates the area of the rectangle *)
        val areaFn = fn () => width * height
    in
        (* Return a Shape with the area function and the name "Rectangle" *)
        Shape {area = areaFn, name = "Rectangle"}
    end

(* Test case: if you don't answer this question,
   comment the following before you submit       *)

val myRectangle = makeRectangle (7.0, 4.0);

(* Creating a list of shapes                     *)

(* Test case: if you don't answer this question,
   comment the following before you submit       *)

val shapes = [
  makeCircle 5.0,
  makeRectangle (3.0, 4.0),
  makeCircle 2.5
];

(* Define a function totalArea to calculate total 
   area of a list of given shapes. Requirement:
   use the SML function foldl                    *)

(* Function to calculate the total area of a list of shapes *)
fun totalArea shapes =
    let
        (* Helper function to accumulate areas *)
        fun addArea (acc, Shape {area, name}) = acc + area ()
    in
        (* Use foldl to sum up the areas *)
        foldl addArea 0.0 shapes
    end

(* Test case: if you don't answer this question,
   comment the following before you submit       *)

val total = totalArea shapes

(* QUESTION 5 (4 marks) *)

(* Write a function countOccurrences that uses
   SML's functions List.length and List.filter
   to count the occurrences of a given integer n
   in a list of integers. Make sure that your
   function countOccurrences can ONLY be used
   on integers as first argument and lists of
   integers as second argument.                  *)

(* your solution goes here                       *)

(* Test case: if you don't answer this question,
   comment the following before you submit       *)

val threeCount =
countOccurrences 3
[1,2,3,4,5,4,3,2,1,2,3,4,5,4,3,2,1];

(* turn your function into a generic function:
   it should be applicable to a list of any type
   of value, not just integers                   *)

(* your solution goes here                       *)

(* Test case: if you don't answer this question,
   comment the following before you submit       *)

val threeListCount = countOccurrences'
       [3] [[3,4], [3], [5,6], [3]];

(* Test case: in case you solved Question 3      *)

val bossKeyCount = countOccurrences'
       (Key {name = "Golden Key", 
             door = "Boss Room"})
       inventory;

(* no submission: what kind of restriction does 
   SML impose on the argument types of 
   countOccurrences'? How does the syntax of 
   type variables indicate this restriction?     *)

(* With this knowledge, break the function
   countOccurrences': Apply the function
   to an SML value and a list that contains
   that value as its only element, such that
   the application does not pass the SML
   type checker.                                 *)

val strangeValue = true; (* replace true to
                            get a type error
                            in the application
                            below                *)

(* Reverse test case: The following should
   give a type error                             *)

val givesTypeError = countOccurrences' 
                 strangeValue [strangeValue];
